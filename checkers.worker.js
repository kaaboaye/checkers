!function(e){self.webpackChunk=function(t,r){for(var o in r)e[o]=r[o];for(;t.length;)n[t.pop()]=1};var t={},n={0:1},r={};var o={5:function(){return{"./index_bg.js":{__wbindgen_json_parse:function(e,n){return t[4].exports.c(e,n)},__wbg_log_c703a4c71dac371b:function(e,n){return t[4].exports.b(e,n)}}}}};function a(n){if(t[n])return t[n].exports;var r=t[n]={i:n,l:!1,exports:{}};return e[n].call(r.exports,r,r.exports,a),r.l=!0,r.exports}a.e=function(e){var t=[];return t.push(Promise.resolve().then((function(){n[e]||importScripts(a.p+""+({}[e]||e)+".worker.js")}))),({1:[5]}[e]||[]).forEach((function(e){var n=r[e];if(n)t.push(n);else{var i,s=o[e](),u=fetch(a.p+""+{5:"52ff24f3389315c7f182"}[e]+".module.wasm");if(s instanceof Promise&&"function"==typeof WebAssembly.compileStreaming)i=Promise.all([WebAssembly.compileStreaming(u),s]).then((function(e){return WebAssembly.instantiate(e[0],e[1])}));else if("function"==typeof WebAssembly.instantiateStreaming)i=WebAssembly.instantiateStreaming(u,s);else{i=u.then((function(e){return e.arrayBuffer()})).then((function(e){return WebAssembly.instantiate(e,s)}))}t.push(r[e]=i.then((function(t){return a.w[e]=(t.instance||t).exports})))}})),Promise.all(t)},a.m=e,a.c=t,a.d=function(e,t,n){a.o(e,t)||Object.defineProperty(e,t,{enumerable:!0,get:n})},a.r=function(e){"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(e,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(e,"__esModule",{value:!0})},a.t=function(e,t){if(1&t&&(e=a(e)),8&t)return e;if(4&t&&"object"==typeof e&&e&&e.__esModule)return e;var n=Object.create(null);if(a.r(n),Object.defineProperty(n,"default",{enumerable:!0,value:e}),2&t&&"string"!=typeof e)for(var r in e)a.d(n,r,function(t){return e[t]}.bind(null,r));return n},a.n=function(e){var t=e&&e.__esModule?function(){return e.default}:function(){return e};return a.d(t,"a",t),t},a.o=function(e,t){return Object.prototype.hasOwnProperty.call(e,t)},a.p="",a.w={},a(a.s=1)}([,function(e,t,n){"use strict";var r=this&&this.__importDefault||function(e){return e&&e.__esModule?e:{default:e}};Object.defineProperty(t,"__esModule",{value:!0});var o=n(2);r(n(3)).default.then((function(e){o.expose(e)}))},function(e,t,n){"use strict";n.r(t),n.d(t,"createEndpoint",(function(){return o})),n.d(t,"expose",(function(){return c})),n.d(t,"proxy",(function(){return y})),n.d(t,"proxyMarker",(function(){return r})),n.d(t,"releaseProxy",(function(){return a})),n.d(t,"transfer",(function(){return b})),n.d(t,"transferHandlers",(function(){return u})),n.d(t,"windowEndpoint",(function(){return h})),n.d(t,"wrap",(function(){return l}));const r=Symbol("Comlink.proxy"),o=Symbol("Comlink.endpoint"),a=Symbol("Comlink.releaseProxy"),i=Symbol("Comlink.thrown"),s=e=>"object"==typeof e&&null!==e||"function"==typeof e,u=new Map([["proxy",{canHandle:e=>s(e)&&e[r],serialize(e){const{port1:t,port2:n}=new MessageChannel;return c(e,t),[n,[n]]},deserialize:e=>(e.start(),l(e))}],["throw",{canHandle:e=>s(e)&&i in e,serialize({value:e}){let t;return t=e instanceof Error?{isError:!0,value:{message:e.message,name:e.name,stack:e.stack}}:{isError:!1,value:e},[t,[]]},deserialize(e){if(e.isError)throw Object.assign(new Error(e.value.message),e.value);throw e.value}}]]);function c(e,t=self){t.addEventListener("message",(function n(r){if(!r||!r.data)return;const{id:o,type:a,path:s}=Object.assign({path:[]},r.data),u=(r.data.argumentList||[]).map(v);let l;try{const t=s.slice(0,-1).reduce((e,t)=>e[t],e),n=s.reduce((e,t)=>e[t],e);switch(a){case 0:l=n;break;case 1:t[s.slice(-1)[0]]=v(r.data.value),l=!0;break;case 2:l=n.apply(t,u);break;case 3:l=y(new n(...u));break;case 4:{const{port1:t,port2:n}=new MessageChannel;c(e,n),l=b(t,[t])}break;case 5:l=void 0}}catch(e){l={value:e,[i]:0}}Promise.resolve(l).catch(e=>({value:e,[i]:0})).then(e=>{const[r,i]=g(e);t.postMessage(Object.assign(Object.assign({},r),{id:o}),i),5===a&&(t.removeEventListener("message",n),f(t))})})),t.start&&t.start()}function f(e){(function(e){return"MessagePort"===e.constructor.name})(e)&&e.close()}function l(e,t){return function e(t,n=[],r=function(){}){let i=!1;const s=new Proxy(r,{get(r,o){if(p(i),o===a)return()=>w(t,{type:5,path:n.map(e=>e.toString())}).then(()=>{f(t),i=!0});if("then"===o){if(0===n.length)return{then:()=>s};const e=w(t,{type:0,path:n.map(e=>e.toString())}).then(v);return e.then.bind(e)}return e(t,[...n,o])},set(e,r,o){p(i);const[a,s]=g(o);return w(t,{type:1,path:[...n,r].map(e=>e.toString()),value:a},s).then(v)},apply(r,a,s){p(i);const u=n[n.length-1];if(u===o)return w(t,{type:4}).then(v);if("bind"===u)return e(t,n.slice(0,-1));const[c,f]=d(s);return w(t,{type:2,path:n.map(e=>e.toString()),argumentList:c},f).then(v)},construct(e,r){p(i);const[o,a]=d(r);return w(t,{type:3,path:n.map(e=>e.toString()),argumentList:o},a).then(v)}});return s}(e,[],t)}function p(e){if(e)throw new Error("Proxy has been released and is not useable")}function d(e){const t=e.map(g);return[t.map(e=>e[0]),(n=t.map(e=>e[1]),Array.prototype.concat.apply([],n))];var n}const m=new WeakMap;function b(e,t){return m.set(e,t),e}function y(e){return Object.assign(e,{[r]:!0})}function h(e,t=self,n="*"){return{postMessage:(t,r)=>e.postMessage(t,n,r),addEventListener:t.addEventListener.bind(t),removeEventListener:t.removeEventListener.bind(t)}}function g(e){for(const[t,n]of u)if(n.canHandle(e)){const[r,o]=n.serialize(e);return[{type:3,name:t,value:r},o]}return[{type:0,value:e},m.get(e)||[]]}function v(e){switch(e.type){case 3:return u.get(e.name).deserialize(e.value);case 0:return e.value}}function w(e,t,n){return new Promise(r=>{const o=new Array(4).fill(0).map(()=>Math.floor(Math.random()*Number.MAX_SAFE_INTEGER).toString(16)).join("-");e.addEventListener("message",(function t(n){n.data&&n.data.id&&n.data.id===o&&(e.removeEventListener("message",t),r(n.data))})),e.start&&e.start(),e.postMessage(Object.assign({id:o},t),n)})}},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.default=new Promise((function(e){n.e(1).then(function(t){e(n(0))}.bind(null,n)).catch(n.oe)}))}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,